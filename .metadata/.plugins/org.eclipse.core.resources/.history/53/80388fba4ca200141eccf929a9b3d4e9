
//Подключение необходимых библиотек
import javax.imageio.*;
import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.io.*;

//Класс панели, которая является игровым полем
class pole extends JPanel
{
	  private Image samolet; // Закрытая Переменная класса, в которую загружается самолёт
	  private Image nebo; // Закрытая Переменная класса, в которую загружается фон
	  public int x = 400; // Открытая Переменная класса, в которую загружается самолёт
	  private int slogn; // Переменная сложности игры
	  private shar[] gameShar; // Массив шаров
	  private Image end_game; // Изображение Окончания игры
	  public Timer timerUpdate,timerDraw; // Два таймера
	  public int schet=0;
	  public String str;
	  public JPanel contentPane;
	  
	  	  
	   // Конструктор класса 
	   public pole(int slogn)
	   {		   
		   this.slogn = slogn;			  
		   // Загрузка изображения шара из файла
		   try
		   {
		     samolet = ImageIO.read(new File("c:\\gm\\samolet.png"));
		   }
		   catch(IOException ex) {}
		   
		   // Загрузка изображения фона из файла
		   try
		   {
		     nebo = ImageIO.read(new File("c:\\gm\\nebo.png"));
		   }
		   catch(IOException ex) {}
		   
 	   // Загрузка изображения Окончания игры
		   try
		   {
		     end_game = ImageIO.read(new File("c:\\gm\\end_game.jpg"));
		   }
		   catch(IOException ex) {}		   
		
 		//  Загрузка семи изображений шаров
		   gameShar = new shar[5];
		   for (int i=0;i<5;i++)
		   {
			   try
			   {
				   gameShar[i] = new shar(ImageIO.read(new File("c:\\gm\\p"+i+".png")));
			   }
			   catch (IOException ex) {System.out.println("111");}
		   }

		   // Создание таймера, который будет раз в три секунды проверять и добавлять шаров на игровое поле 		   
		   timerUpdate = new Timer(3000,new ActionListener() {				
				public void actionPerformed(ActionEvent e) {
		           updateStart(); // Метод для проверки и добавление шаров на игровое поле
				}
			});		    
		   timerUpdate.start(); // Запуск таймера timerUpdate 		   		   
		   
		   // Создание таймера, который будет перерисовывать игровое поле 20 раз в секунду 	   
		   timerDraw = new Timer(50,new ActionListener() {				
				public void actionPerformed(ActionEvent e) {
		           repaint(); // Запуск метода перерисовки поля (public void paintComponent(Graphics gr))
				}
			});		    
		   timerDraw.start(); // Запуск таймера для перерисовки
		   
		
		   
	   }
	   	   
	   // Метод, который отрисовывает графические объекты на панели
	   public void paintComponent(Graphics gr)
	   {
		   // Выполнить отрисовку сначала самого окна
		   super.paintComponent(gr);
		   gr.drawImage(nebo, 0, 0, null); // Рисование фона 
		   gr.drawImage(samolet, x, 10, null); // Рисование шара
		   
		   
		   
		   // Цикл, который отображает шары на игровом поле и проверяет пропущенные шары
        for (int i=0;i<5;i++)
        {
        	
     	       gameShar[i].draw(gr); // Отображение шара
     	       if (gameShar[i].act==true) // Если шар из массива активен
     	       {
     		   if ((gameShar[i].y)<=75) // Если шар достиг нижней границы
     		   {
     			    if (Math.abs(gameShar[i].x - x) > 75) // Если шар пропущен
     			    {
     			        gr.drawImage(end_game, 300, 300, null); // Вывод картинки Окончания игры
     			    	timerDraw.stop(); // Оставнока таймера timerDraw 
     			    	timerUpdate.stop(); // Оставнока таймера timerUpdate
     			        break; // Прерывание цикла
     			    }
     			    else {
     			    	gameShar[i].act=false;
     			    	schet+=1;
     			    	
     					
     			   // Снятие шара с игрового поля, если он лопнул
     			    }
     		   }
     	       }
        }
	   }
	   
	   private void sc()
	   {
		   
		   str = Integer.toString(schet);
	    	  /*JLabel label1 = new JLabel(str);
			label1.setForeground(Color.RED);
			label1.setFont(new Font("Arial", Font.PLAIN, 50));
			label1.setBounds(100, 100, 133, 44);
			contentPane.add(label1);*/
	   }
 	// Метод для проверки и добавление шаров на игровое поле
	   private void updateStart()
	   {
        int kol=0; // Переменная для подсчета шаров на игровом поле
        for (int i=0;i<5;i++) // Цикл перебора всех шаров массива
        {
           if (gameShar[i].act==false) // Если шар не на игровом поле
           {
              if (kol<slogn) // Если текущее количество менее номера сложности (от 1 до 5)
              {
                gameShar[i].start(); // Активизация шара на игровом поле, вывод его сверху игрового поля
                break; // Прерывание цикла
              }
           }
           else kol++; // Если шар на игровом поле
        }
	   }	   
}